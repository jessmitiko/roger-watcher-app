const { spawn } = require('child_process');
const express = require('express');
const path = require('path');
const app = require('express')();
const http = require('http').createServer(app);
const io = require('socket.io')(http);
const fs = require('fs');
const ga_token = 'Hit delivery requested: ';
const firebase_token = 'Logging event';
const instances = {};

app.use(express.static(path.join(__dirname, '/src')));

app.get('/', (_, res) => {
  res.sendFile(__dirname + '/src/panel.html');
});

io.on('connection', (socket) => {
  socket.on('create_connection', ({ tool, app }) => {
    return (tool == 'google_analytics') ? startGA(socket) : startFirebase(app, socket);
  });

  socket.on('end_connection', ({ tool }) => {
    return (tool == 'google_analytics') ? endGA() : endFirebase();
  });

  socket.on('disconnect', () => {
    endGA();
    endFirebase();
  });
});

http.listen(3000, () => {
  console.log('listening on port 3000.');
});

function startGA(socket) {
  endInstance('ga-debug', 'ga-logcat');

  createADBInstance({
    name: 'ga-debug',
    params: ['shell', 'setprop', 'log.tag.GAv4-SVC', 'DEBUG'],
    handler: console.log,
  });

  createADBInstance({
    name: 'ga-logcat',
    params: ['logcat', '-v', 'time', '-s', 'GAv4-SVC'],
    handler: (data) => {
      const hits = String(data)
        .split('\n')
        .filter((txt) => txt.indexOf(ga_token) >= 0)
        .map((txt) => {
          return txt
            .split(ga_token)
            .pop()
            .split(', ')
            .reduce((acc, cur) => {
              const [key, value] = cur.split('=');
              acc[key] = value;
              return acc;
            }, {});
        });
      hits.forEach((hit) => {
        socket.emit('hit sent', { data: hit, tool: 'google_analytics' });
      });
    },
  });
}

function endGA() {
  endInstance('ga-debug', 'ga-logcat');
  /**createADBInstance({
    name: 'ga-debug-end',
    params: ['shell', 'setprop', 'log.tag.GAv4', 'DEBUG'],
    handler: console.log,
  });**/
}

function startFirebase(app, socket) {
  endInstance('fa-debug', 'fa-verbose', 'fa-verbose-svc', 'fa-main');

  createADBInstance({
    name: 'fa-debug',
    params: ['shell', 'setprop', 'debug.firebase.analytics.app', app],
    handler: console.log,
  });
  createADBInstance({
    name: 'fa-verbose',
    params: ['shell', 'setprop', 'log.tag.FA', 'VERBOSE'],
    handler: console.log,
  });
  createADBInstance({
    name: 'fa-verbose-svc',
    params: ['shell', 'setprop', 'log.tag.FA-SVC', 'VERBOSE'],
    handler: console.log,
  });

  createADBInstance({
    name: 'fa-main',
    params: ['logcat', '-v', 'time', '-s','FA'],
    handler: (data) => {
      const hits = String(data)
        .split('\n')
        .filter((txt) => txt.match(firebase_token))
        .map((txt) => {
          const [, bundle] = txt.match(/Bundle(.*)/);
          const data = bundle.replace(/(\[\{|\}\])|\(\_.*?\)/g, "");
          const res = { ...parse(data) };

          if(!res.ga_event_name) res['ga_event_name'] = getEventName(txt);

          return res;
        });
      hits.forEach((data) => {
        // only catch those hits generated by GTM
        if(data.ga_event_origin && data.ga_event_origin.includes('gtm')) socket.emit('hit sent', { data: data, tool: 'firebase_analytics' });
      });
    },
  });
}

function getEventName(txt) {
  const [ raw ] = txt.match(/Logging event.*(Bundle|,params=Bundle)/);
  const data = raw.replace(/Logging event.*:/, '').replace(/,params=Bundle|Bundle/, '');

  return (data.includes('=')) ? parse(data).name : data.replace(/ |,/g, '');
}

function parse(txt) {
  return txt.split(', ').reduce((acc, next) => {
    // val estÃ¡ dando indefinido por causa do parametro content_list dos eventos de appsflyer (arrumar depois)
    const [key, val] = next.split('=');
    acc[key] = (val != undefined) ? val.replace(/^'|'$/g, '') : null;
    return acc;
  }, {});
}

function endFirebase() {
  endInstance('fa-debug', 'fa-verbose', 'fa-verbose-svc', 'fa-main');
  /**createADBInstance({
    name: 'fa-debug-end',
    params: ['shell', 'setprop', 'debug.firebase.analytics.app', '.none.'],
    handler: console.log,
  });**/
}

function createADBInstance({ name, params, handler }) {
  const instance = spawn('adb', params, {shell: true});
  instances[name] = instance;

  console.log(`Creating instance for ${name}`);

  instance.stdout.on('data', handler);

  instance.stderr.on('data', (data) => {
    console.error(`stderr: ${data}`);
  });

  instance.on('close', (code) => {
    console.log(`child process exited with code ${code}`);
  });
}

function endInstance(...names) {
  names.forEach((name) => {
    const instance = instances[name];
    if (!instance) return;

    console.log(`Killing ${name}...`);
    instance.stdin.pause();
    instance.kill();
    delete instances[name];
    console.log(`${name} killed`);
  });
}
